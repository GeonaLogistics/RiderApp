{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\kawab\\\\Desktop\\\\expresslog\\\\node_modules\\\\react-native-paystack-webview\\\\index.js\";\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { WebView } from \"react-native-webview\";\n\nfunction Paystack(props, ref) {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setisLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showModal = _useState4[0],\n      setshowModal = _useState4[1];\n\n  useEffect(function () {\n    autoStartCheck();\n  }, []);\n\n  var autoStartCheck = function autoStartCheck() {\n    if (props.autoStart) {\n      setshowModal(true);\n    }\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      StartTransaction: function StartTransaction() {\n        setshowModal(true);\n      },\n      endTransaction: function endTransaction() {\n        setshowModal(false);\n      }\n    };\n  });\n  var Paystackcontent = \"   \\n      <!DOCTYPE html>\\n      <html lang=\\\"en\\\">\\n              <head>\\n                      <meta charset=\\\"UTF-8\\\">\\n                      <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"ie=edge\\\">\\n                      <!-- Latest compiled and minified CSS -->\\n                      <link rel=\\\"stylesheet\\\" href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\" integrity=\\\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\\\" crossorigin=\\\"anonymous\\\">\\n                      <!-- Fonts -->\\n                      <link rel=\\\"dns-prefetch\\\" href=\\\"//fonts.gstatic.com\\\">\\n                      <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n                      <link href=\\\"https://fonts.googleapis.com/css?family=Nunito\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\\n                      <title>SUBSCRIPTION</title>\\n              </head>\\n              <body  onload=\\\"payWithPaystack()\\\" style=\\\"background-color:#fff;height:100vh \\\">\\n                      <script src=\\\"https://js.paystack.co/v1/inline.js\\\"></script>\\n                      <script type=\\\"text/javascript\\\">\\n                              window.onload = payWithPaystack;\\n                              function payWithPaystack(){\\n                              var handler = PaystackPop.setup({ \\n                                key: '\" + props.paystackKey + \"',\\n                                email: '\" + props.billingEmail + \"',\\n                                amount: \" + props.amount + \"00, \\n                                channels: \" + props.channels + \",\\n                                currency: \" + props.currency + \",\\n                                ref: '\" + props.refNumber + \"', // generates a pseudo-unique reference. Please replace with a reference you generated. Or remove the line entirely so our API will generate one for you\\n                                metadata: {\\n                                custom_fields: [\\n                                        {\\n                                        display_name:  '\" + props.billingName + \"',\\n                                        variable_name:  '\" + props.billingName + \"',\\n                                        value:''\\n                                        }\\n                                ]\\n                                },\\n                                callback: function(response){\\n                                      var resp = {event:'successful', transactionRef:response};\\n                                       window.ReactNativeWebView.postMessage(JSON.stringify(resp))\\n                                },\\n                                onClose: function(){\\n                                   var resp = {event:'cancelled'};\\n                                   window.ReactNativeWebView.postMessage(JSON.stringify(resp))\\n                                }\\n                                });\\n                                handler.openIframe();\\n                                }\\n                      </script> \\n              </body>\\n      </html> \\n      \";\n\n  var messageReceived = function messageReceived(data) {\n    var webResponse = JSON.parse(data);\n\n    if (props.handleWebViewMessage) {\n      props.handleWebViewMessage(data);\n    }\n\n    switch (webResponse.event) {\n      case \"cancelled\":\n        setshowModal(false);\n        props.onCancel({\n          status: \"cancelled\"\n        });\n        break;\n\n      case \"successful\":\n        setshowModal(false);\n        var reference = webResponse.transactionRef;\n        props.onSuccess({\n          status: \"success\",\n          transactionRef: reference,\n          data: webResponse\n        });\n        break;\n\n      default:\n        if (props.handleWebViewMessage) {\n          props.handleWebViewMessage(data);\n        }\n\n        break;\n    }\n  };\n\n  var showPaymentModal = function showPaymentModal() {\n    setshowModal(true);\n  };\n\n  var button = props.renderButton ? props.renderButton(showPaymentModal) : React.createElement(TouchableOpacity, {\n    style: props.btnStyles,\n    onPress: function onPress() {\n      return showPaymentModal();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: props.textStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, props.buttonText));\n  return React.createElement(SafeAreaView, {\n    style: [{\n      flex: 1\n    }, props.SafeAreaViewContainer],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }\n  }, React.createElement(Modal, {\n    style: [{\n      flex: 1\n    }],\n    visible: showModal,\n    animationType: \"slide\",\n    transparent: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, React.createElement(SafeAreaView, {\n    style: [{\n      flex: 1\n    }, props.SafeAreaViewContainerModal],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, React.createElement(WebView, {\n    style: [{\n      flex: 1\n    }],\n    source: {\n      html: Paystackcontent\n    },\n    onMessage: function onMessage(e) {\n      messageReceived(e.nativeEvent.data);\n    },\n    onLoadStart: function onLoadStart() {\n      return setisLoading(true);\n    },\n    onLoadEnd: function onLoadEnd() {\n      return setisLoading(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }), isLoading && React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: props.ActivityIndicatorColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  })))), props.showPayButton && button);\n}\n\nexport default forwardRef(Paystack);\nPaystack.defaultProps = {\n  buttonText: \"Pay Now\",\n  amount: 10,\n  ActivityIndicatorColor: \"green\",\n  autoStart: false,\n  showPayButton: true,\n  currency: \"NGN\",\n  refNumber: \"\" + Math.floor(Math.random() * 1000000000 + 1),\n  channels: [\"card\"]\n};","map":{"version":3,"sources":["C:/Users/kawab/Desktop/expresslog/node_modules/react-native-paystack-webview/index.js"],"names":["React","useState","useEffect","forwardRef","useImperativeHandle","WebView","Paystack","props","ref","isLoading","setisLoading","showModal","setshowModal","autoStartCheck","autoStart","StartTransaction","endTransaction","Paystackcontent","paystackKey","billingEmail","amount","channels","currency","refNumber","billingName","messageReceived","data","webResponse","JSON","parse","handleWebViewMessage","event","onCancel","status","reference","transactionRef","onSuccess","showPaymentModal","button","renderButton","btnStyles","textStyles","buttonText","flex","SafeAreaViewContainer","SafeAreaViewContainerModal","html","e","nativeEvent","ActivityIndicatorColor","showPayButton","defaultProps","Math","floor","random"],"mappings":"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","sourcesContent":["/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow\n */\n\nimport React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle,\n} from \"react\";\nimport {\n  Modal,\n  Text,\n  View,\n  TouchableOpacity,\n  ActivityIndicator,\n  SafeAreaView,\n} from \"react-native\";\nimport { WebView } from \"react-native-webview\";\n\nfunction Paystack(props, ref) {\n  const [isLoading, setisLoading] = useState(true);\n  const [showModal, setshowModal] = useState(false);\n\n  useEffect(() => {\n    autoStartCheck();\n  }, []);\n\n  const autoStartCheck = () => {\n    if (props.autoStart) {\n      setshowModal(true);\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    StartTransaction() {\n      setshowModal(true);\n    },\n    endTransaction() {\n      setshowModal(false);\n    },\n  }));\n\n  const Paystackcontent = `   \n      <!DOCTYPE html>\n      <html lang=\"en\">\n              <head>\n                      <meta charset=\"UTF-8\">\n                      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n                      <!-- Latest compiled and minified CSS -->\n                      <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\">\n                      <!-- Fonts -->\n                      <link rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\">\n                      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                      <link href=\"https://fonts.googleapis.com/css?family=Nunito\" rel=\"stylesheet\" type=\"text/css\">\n                      <title>SUBSCRIPTION</title>\n              </head>\n              <body  onload=\"payWithPaystack()\" style=\"background-color:#fff;height:100vh \">\n                      <script src=\"https://js.paystack.co/v1/inline.js\"></script>\n                      <script type=\"text/javascript\">\n                              window.onload = payWithPaystack;\n                              function payWithPaystack(){\n                              var handler = PaystackPop.setup({ \n                                key: '${props.paystackKey}',\n                                email: '${props.billingEmail}',\n                                amount: ${props.amount}00, \n                                channels: ${props.channels},\n                                currency: ${props.currency},\n                                ref: '${props.refNumber}', // generates a pseudo-unique reference. Please replace with a reference you generated. Or remove the line entirely so our API will generate one for you\n                                metadata: {\n                                custom_fields: [\n                                        {\n                                        display_name:  '${props.billingName}',\n                                        variable_name:  '${props.billingName}',\n                                        value:''\n                                        }\n                                ]\n                                },\n                                callback: function(response){\n                                      var resp = {event:'successful', transactionRef:response};\n                                       window.ReactNativeWebView.postMessage(JSON.stringify(resp))\n                                },\n                                onClose: function(){\n                                   var resp = {event:'cancelled'};\n                                   window.ReactNativeWebView.postMessage(JSON.stringify(resp))\n                                }\n                                });\n                                handler.openIframe();\n                                }\n                      </script> \n              </body>\n      </html> \n      `;\n\n  const messageReceived = (data) => {\n    var webResponse = JSON.parse(data);\n    if (props.handleWebViewMessage) {\n      props.handleWebViewMessage(data);\n    }\n    switch (webResponse.event) {\n      case \"cancelled\":\n        setshowModal(false);\n        props.onCancel({ status: \"cancelled\" });\n        break;\n\n      case \"successful\":\n        setshowModal(false);\n        const reference = webResponse.transactionRef;\n\n        props.onSuccess({\n          status: \"success\",\n          transactionRef: reference,\n          data: webResponse,\n        });\n        break;\n\n      default:\n        if (props.handleWebViewMessage) {\n          props.handleWebViewMessage(data);\n        }\n        break;\n    }\n  };\n\n  const showPaymentModal = () => {\n    setshowModal(true);\n  };\n\n  const button = props.renderButton ? (\n    props.renderButton(showPaymentModal)\n  ) : (\n    <TouchableOpacity\n      style={props.btnStyles}\n      onPress={() => showPaymentModal()}\n    >\n      <Text style={props.textStyles}>{props.buttonText}</Text>\n    </TouchableOpacity>\n  );\n\n  return (\n    <SafeAreaView style={[{ flex: 1 }, props.SafeAreaViewContainer]}>\n      <Modal\n        style={[{ flex: 1 }]}\n        visible={showModal}\n        animationType=\"slide\"\n        transparent={false}\n      >\n        <SafeAreaView style={[{ flex: 1 }, props.SafeAreaViewContainerModal]}>\n          <WebView\n            style={[{ flex: 1 }]}\n            source={{ html: Paystackcontent }}\n            onMessage={(e) => {\n              messageReceived(e.nativeEvent.data);\n            }}\n            onLoadStart={() => setisLoading(true)}\n            onLoadEnd={() => setisLoading(false)}\n          />\n\n          {isLoading && (\n            <View>\n              <ActivityIndicator\n                size=\"large\"\n                color={props.ActivityIndicatorColor}\n              />\n            </View>\n          )}\n        </SafeAreaView>\n      </Modal>\n      {props.showPayButton && button}\n    </SafeAreaView>\n  );\n}\n\nexport default forwardRef(Paystack);\n\nPaystack.defaultProps = {\n  buttonText: \"Pay Now\",\n  amount: 10,\n  ActivityIndicatorColor: \"green\",\n  autoStart: false,\n  showPayButton: true,\n  currency: \"NGN\",\n  refNumber: \"\" + Math.floor(Math.random() * 1000000000 + 1),\n  channels: [\"card\"],\n};\n"]},"metadata":{},"sourceType":"module"}